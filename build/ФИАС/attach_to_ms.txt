GRANT ALL PRIVILEGES ON DATABASE ms TO ms;
GRANT SELECT ON ALL TABLES IN SCHEMA public TO ms;
GRANT SELECT ON ALL TABLES IN SCHEMA fias TO ms;
GRANT USAGE ON SCHEMA fias TO ms;


CREATE EXTENSION postgres_fdw;

DROP SERVER ms;
CREATE SERVER ms FOREIGN DATA WRAPPER postgres_fdw OPTIONS (host 'localhost', dbname 'ms', port '5432');
GRANT USAGE ON FOREIGN SERVER ms TO beton;

!Создать сзхему в нашей базе!
CREATE SCHEMA fias;

!Доступ юзеру в схему в нашей базе!
GRANT SELECT ON ALL TABLES IN SCHEMA fias TO beton;
GRANT USAGE, CREATE ON SCHEMA fias TO beton;



#Под юзером beton
CREATE USER MAPPING FOR beton SERVER ms OPTIONS (user 'ms', password '159753');

IMPORT FOREIGN SCHEMA fias FROM SERVER ms INTO fias;

#Добавить функцию
fias.find_address(text, integer)

-- FUNCTION: fias.find_address(text, integer)

-- DROP FUNCTION fias.find_address(text, integer);

CREATE OR REPLACE FUNCTION fias.find_address(
	in_search text,
	in_count integer)
    RETURNS TABLE(search_name text, addr_strucs json, house_struc json) 
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE 
    ROWS 1000
AS $BODY$
DECLARE
	v_data_row RECORD;
	v_count smallint;
BEGIN
	v_count = 0;
	FOR v_data_row IN
	SELECT t.* FROM fias.address_search AS t WHERE t.search_name ilike in_search LIMIT in_count
	LOOP
		search_name = v_data_row.search_name;
		addr_strucs = v_data_row.addr_strucs;
		house_struc = v_data_row.house_struc;
		
		v_count = v_count + 1;
		
		RETURN NEXT;
	END LOOP;
	
	IF v_count<in_count THEN
		--houses
		FOR v_data_row IN
		SELECT t.* FROM fias.house_search AS t WHERE t.search_name ilike in_search LIMIT (in_count-v_count)
		LOOP
			search_name = v_data_row.search_name;
			addr_strucs = v_data_row.addr_strucs;
			house_struc = v_data_row.house_struc;
		
			v_count = v_count + 1;
				
			RETURN NEXT;
		END LOOP;
		
	END IF;	
	
END;
$BODY$;

ALTER FUNCTION fias.find_address(text, integer) OWNER TO ;


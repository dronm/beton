
	public function shipment_transp_nakl_on_list($pm){	
		$docList = []; //shipments

		$link = $this->getDbLinkMaster();

		//from selected shipments
		if($pm->getParamValue("shipment_ids")){
			$shIds = json_decode("[".$this->getExtVal($pm, 'shipment_ids')."]", TRUE);
			if(!count($shIds)){
				throw new Exception("no ids found");
			}
			foreach ($shIds as $id) {
				$shId = intval($id);
				if($shId){
					array_push($docList, $shId); 
				}
			}
		}

		if(!count($docList)){
			throw new Exception("no doc found");
		}

		//must be one client!!!
		$arId = $link->query(sprintf(
			"SELECT 
				o.client_id,
				count(*) AS cnt
		   	FROM shipments AS sh 
			LEFT JOIN orders AS o ON o.id = sh.order_id
			WHERE sh.id IN (%s)
			GROUP BY o.client_id",
			implode(",", $docList)
		));
		$cnt = 0;
		while($ar = $link->fetch_array($arId)){
			$cnt++;
		}
		if(!$cnt){
			throw new Exception("docs not found");
		}
		if($cnt > 1){
			throw new Exception("Документы принадлежат разным контрагентам");
		}

		$faksim = ($pm->getParamValue("faksim") == "1");
		$buhDoc = $this->getExtDbVal($pm, "buh_doc");

		//all shipments on order
		$queryId = $link->query(
			sprintf(
				"SELECT
					sh.id
				FROM shipments AS sh
				WHERE sh.id IN (%s)
				ORDER BY sh.date_time"
				,implode(",", $docList)
			)
		);

		$templateName = $faksim? "Транспортная накладная (факсимиле)" : "Транспортная накладная";
		$erEmpty = 'Отгрузка не найдена!';

		$multiFile = (count($docList) > 1);

		if($multiFile) {
			//many files: pack to zip
			$fileList = array();
			$outFileName = "ТН.zip";
			$outFile = OUTPUT_PATH. md5(uniqid()).'.zip';
			$zip = new ZipArchive();
			if ($zip->open($outFile, ZIPARCHIVE::CREATE)!==TRUE) {
				throw new Exception("cannot open ".$outFile);
			}
		}else{
			$outFileName = "ТН.xlsx";
			$outFile = OUTPUT_PATH. md5(uniqid()).'.zip';
		}

		$ind = 0;
		while($shAr = $link->fetch_array($queryId)){
			$ind++;
			$this->check_shipment_for_tn($shAr["id"], $faksim? TRUE:FALSE);

			$tFile = '';
			$fileName = '';
			ExcelTemplate_Controller::genFilledTemplate($link, $templateName, array($shAr["id"], $ind, $buhDoc), $erEmpty, $tFile, $fileName);		
			$fileNameParts = pathinfo($fileName,  PATHINFO_EXTENSION);
			$fileExt = '';
			if(is_array($fileNameParts) && isset($fileNameParts['extension'])){
				$fileExt = $fileNameParts['extension'];
			}else if (gettype($fileNameParts) == "string"){
				$fileExt = $fileNameParts;
			}
			if(!strlen($fileExt)){
				$fileExt = '.xlsx';
			}else if($fileExt[0] != '.'){
				$fileExt = '.'.$fileExt;
			}

			if($multiFile) {
				$zip->addFile($tFile, $shAr["id"].'.xls');
				array_push($fileList, $tFile);

				usleep(500000);

			}else{
				$outFile = $tFile;
			}
		}

		if($multiFile) {
			$zip->close();

			//delete files, as they are already in a zip
			foreach($fileList as $fl){
				unlink($fl);
			}
		}

		try{
			$flMime = getMimeTypeOnExt($outFileName);
			ob_clean();
			downloadFile(
				$outFile,
				$flMime,
				'attachment;',
				$outFileName
			);
		}finally{
			unlink($outFile);
		}
	}
